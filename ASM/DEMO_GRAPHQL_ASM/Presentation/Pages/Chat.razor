// ChatPage.razor
@page "/chat"
@using System.Net.Http.Json
@inject HttpClient Http

<h3>Chat with GPT</h3>

<div class="chat-container">
    <div class="conversation-container">
        @foreach (var msg in messages)
        {
            <div class="@(msg.IsUser ? "user-message" : "bot-message")">
                <div class="message-content">
                    <p>@msg.Content</p>
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(error))
        {
            <div class="error">
                <p>@error</p>
            </div>
        }
    </div>

    <div class="message-input">
        <input type="text"
               @bind="message"
               @bind:event="oninput"
               placeholder="Type your message..."
               @onkeyup="@((KeyboardEventArgs e) => { if (e.Key == "Enter") SendMessage(); })" />
        <button @onclick="SendMessage" disabled="@(isLoading || string.IsNullOrEmpty(message))">
            @(isLoading ? "Sending..." : "Send")
        </button>
    </div>
</div>

@code {
    private string message = string.Empty;
    private string error = string.Empty;
    private bool isLoading = false;
    private List<ChatMessage> messages = new();

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(message)) return;

        // Add user message to conversation
        messages.Add(new ChatMessage { Content = message, IsUser = true });

        isLoading = true;
        error = string.Empty;

        try
        {
            // Construct the GraphQL query
            var graphqlQuery = new
            {
                query = @"mutation CallCHATGPT($request: ChatRequestInput!) {
                    callCHATGPT(request: $request) {
                        response
                    }
                }",
                variables = new
                {
                    request = new
                    {
                        message
                    }
                }
            };

            // Send the request to the GraphQL endpoint
            var httpResponse = await Http.PostAsJsonAsync("https://localhost:7257/graphql/", graphqlQuery);
            httpResponse.EnsureSuccessStatusCode();

            // Parse the response
            var result = await httpResponse.Content.ReadFromJsonAsync<GraphQLResponse>();
            string botResponse = result?.Data?.CallCHATGPT?.Response ?? "No response received";

            // Add bot response to conversation
            messages.Add(new ChatMessage { Content = botResponse, IsUser = false });
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            message = string.Empty; // Clear input after sending
        }
    }

    // Response models
    private class GraphQLResponse
    {
        public GraphQLData? Data { get; set; }
    }

    private class GraphQLData
    {
        public ChatGPTResponse? CallCHATGPT { get; set; }
    }

    private class ChatGPTResponse
    {
        public string? Response { get; set; }
    }
}

<style>
    .chat-container {
        max-width: 800px;
        margin: 20px auto;
        display: flex;
        flex-direction: column;
        height: 80vh;
    }

    .conversation-container {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        border: 1px solid #eee;
        border-radius: 4px;
        margin-bottom: 20px;
    }

    .user-message {
        display: flex;
        justify-content: flex-end;
        margin: 10px 0;
    }

    .bot-message {
        display: flex;
        justify-content: flex-start;
        margin: 10px 0;
    }

    .message-content {
        max-width: 70%;
        padding: 10px;
        border-radius: 8px;
    }

    .user-message .message-content {
        background-color: #007bff;
        color: white;
    }

    .bot-message .message-content {
        background-color: #f8f9fa;
        color: black;
    }

    .message-input {
        display: flex;
        gap: 10px;
    }

        .message-input input {
            flex: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .message-input button {
            padding: 8px 16px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .message-input button:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }

    .error {
        color: #dc3545;
        padding: 10px;
        text-align: center;
    }
</style>