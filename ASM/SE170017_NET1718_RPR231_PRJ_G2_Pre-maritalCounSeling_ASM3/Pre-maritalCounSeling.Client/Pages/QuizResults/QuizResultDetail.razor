@page "/QuizResults/Detail/{id:long}"
@using Pre_maritalCounSeling.Client.Models
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject IJSRuntime jsRuntime
@using System.Text.Json
@using Newtonsoft.Json
@using System.Text


<div class="container mt-5">
    <div class="card shadow-lg rounded-lg p-4 bg-white border-0">
        <h3 class="text-center text-primary mb-4">Quiz Result Detail</h3>

        @if (quizResult == null)
        {
            <p class="text-center text-muted">Loading...</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover table-striped">
                    <tbody>
                        <tr><th>ID</th><td>@quizResult.Id</td></tr>
                        <tr><th>Quiz Image</th><td><img src="@quizResult.QuizImg" alt="Quiz Image" class="img-thumbnail" width="100"></td></tr>
                        <tr><th>Score</th><td>@quizResult.Score</td></tr>
                        <tr><th>Quiz ID</th><td>@quizResult.QuizId</td></tr>
                        <tr><th>User ID</th><td>@quizResult.UserId</td></tr>
                        <tr><th>Result Code</th><td>@quizResult.QuizResultCode</td></tr>
                        <tr><th>Time Completed</th><td>@quizResult.TimeCompleted</td></tr>
                        <tr><th>Attempt Time</th><td>@quizResult.AttemptTime</td></tr>
                        <tr><th>Suggestion</th><td class="text-muted">@quizResult.SuggestionContent</td></tr>
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-center gap-3 mt-4">
                <button class="btn btn-danger shadow-sm px-4" @onclick="DeleteQuizResult">Delete</button>
                <button class="btn btn-secondary shadow-sm px-4" @onclick="GoBack">Back to List</button>
            </div>
        }
    </div>
</div>


<div id="chat-container" class="chat-box @(isChatCollapsed ? "collapsed" : "")">
    <div class="chat-header bg-primary text-white p-2 d-flex justify-content-between align-items-center">
        <span>AI Chat</span>
        <button class="btn btn-sm btn-light" @onclick="ToggleChat">
            @(isChatCollapsed ? "🔼" : "🔽")
        </button>
    </div>
    <div class="chat-body">
        <div class="chat-messages p-3" id="chatMessages">
            @for (int i = 0; i < messages.Count; i++)
            {
                <div class="@(i % 2 != 0 ? "chat-question" : "chat-response")">@messages[i]</div>
            }
        </div>
        <div class="chat-input p-2 d-flex">
            <input class="form-control me-2" @bind="message" placeholder="Type a message..."/>
            <button class="btn btn-success" @onclick="SendMessage">Send</button>
        </div>
    </div>
</div>

<style>
    .chat-box {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 420px;
        background: white;
        border-radius: 12px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.15);
        overflow: hidden;
        transition: transform 0.3s ease-in-out, opacity 0.2s ease-in-out;
    }

    .chat-header {
        background: #007bff;
        color: white;
        padding: 12px 16px;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

        .chat-header button {
            background: white;
            border: none;
            padding: 2px 8px;
            border-radius: 50%;
            font-size: 14px;
            cursor: pointer;
        }

    .chat-messages {
        max-height: 350px;
        overflow-y: auto;
        padding: 12px;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .chat-question, .chat-response {
        padding: 10px 14px;
        border-radius: 8px;
        max-width: 75%;
        word-wrap: break-word;
    }

    .chat-question {
        background: #f1f1f1;
        align-self: flex-start;
    }

    .chat-response {
        background: #007bff;
        color: white;
        align-self: flex-end;
    }

    .chat-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
        background: #f9f9f9;
    }

        .chat-input input {
            flex: 1;
            border-radius: 6px;
            padding: 10px;
            border: 1px solid #ccc;
        }

        .chat-input button {
            margin-left: 8px;
            padding: 10px 16px;
            border-radius: 6px;
            background: #28a745;
            color: white;
            border: none;
            cursor: pointer;
            transition: background 0.2s ease-in-out;
        }

            .chat-input button:hover {
                background: #218838;
            }


    /* Collapsed state */
    .collapsed .chat-body {
        display: none;
    }
</style>



@code {
    [Parameter] public long id { get; set; }
    private QuizResult? quizResult;
    public string message;
    public List<string> messages = new List<string>();
    public bool chatVisible = false;
    private bool isChatCollapsed = false;
    private void ToggleChat()
    {
        isChatCollapsed = !isChatCollapsed;
    }


    protected override async Task OnInitializedAsync()
    {
        quizResult = await httpClient.GetFromJsonAsync<QuizResult>($"https://localhost:7272/api/v1/QuizResults/{id}");
        message = $"I got {quizResult.Score} / 100 on pre-marital testing. Can you give me some advice?";
    }



    public async Task SendMessage()
    {
        messages.Add(message); // Add user message

        if (quizResult == null)
        {
            messages.Add("Quiz result not found.");
            return;
        }

        ChatRequest requestContent = new ChatRequest(message);
        var jsonContent = new StringContent(JsonConvert.SerializeObject(requestContent), Encoding.UTF8, "application/json");
        var response = await httpClient.PostAsync("http://localhost:8080/api/ChatBot/", jsonContent);

        if (response.IsSuccessStatusCode)
        {
            var responseString = await response.Content.ReadAsStringAsync();

            try
            {
                var chatResponse = JsonConvert.DeserializeObject<ChatResponse>(responseString);
                if (chatResponse != null && !string.IsNullOrEmpty(chatResponse.Response))
                {
                    messages.Add(chatResponse.Response); // Add chatbot response
                }
                else
                {
                    messages.Add("Received an empty response from the chatbot.");
                }
            }
            catch (Exception ex)
            {
                messages.Add("Error parsing chatbot response.");
                Console.WriteLine($"JSON Parse Error: {ex.Message}");
            }
        }
        else
        {
            messages.Add("Failed to send message.");
        }
        message = string.Empty;// clear the input box

        StateHasChanged();
    }


    public async Task DeleteQuizResult()
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this quiz result?"))
        {
            var response = await httpClient.DeleteAsync($"https://localhost:7272/api/v1/QuizResults/{id}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/QuizResults/QuizResultList", forceLoad: true);
            }
        }
    }

    public void GoBack()
    {
        Navigation.NavigateTo("/QuizResults/QuizResultList");
    }
}
